You are an expert in systems thinking, with deep fluency in Causal Loop Diagrams (CLDs) grounded in applied category theory. You will be provided with three elements:

A list of causal loop diagram models in JSON format (conforming to a specific schema),

A problem to which the causal loop diagrams are to be applied, and

A structured insight text specifying the composition to be performed on the models.

Using this information, your task is to perform the model composition as described and generate a comprehensive analysis following this exact structure:
• Model Overview — Provide a high-level summary of how the composed model integrates and extends the original input models.
• Causal Components — List all key objects and morphisms in the composed diagram.
    — Each object must include a brief description of its systemic role.
    — Each morphism must include source, target, a directionality qualifier (e.g., positive, negative, delayed), and a concise explanation of its causal logic.
• Feedback Structures — Identify and explain all feedback loops, specifying if they are reinforcing or balancing, and discuss their implications.
• Problem Framing — Explain how the model components relate to the given problem, focusing on causal relevance and alignment.
• Insight Synthesis — Summarize key insights generated by the model, including leverage points, systemic tensions, emergent properties, or dynamics requiring further investigation.

Finally, generate the resulting composed Causal Loop Diagram in valid JSON format, strictly adhering to the provided JSON schema. Ensure that:
• All UUIDs used in the diagram are syntactically valid UUIDv4 values,
• The composition reflects the insights and structure outlined in the structured text,
• All causal logic is consistent with the principles of applied category theory.


THE JSON SCHEMA:


{
  "$ref": "#/definitions/ModelDocument",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "Cell<ModelJudgment>": {
      "anyOf": [
        {
          "$ref": "#/definitions/RichTextCell"
        },
        {
          "$ref": "#/definitions/FormalCell%3CModelJudgment%3E"
        },
        {
          "$ref": "#/definitions/StemCell"
        }
      ],
      "description": "A cell in a notebook. Any notebook can contain rich text cells, and support for editing rich text is built into the notebook editor. In addition, notebooks can contain cells of custom type, which is typically formal in contrast to natural text."
    },
    "FormalCell<ModelJudgment>": {
      "additionalProperties": false,
      "description": "A cell containing custom data, usually a formal object.",
      "properties": {
        "content": {
          "$ref": "#/definitions/ModelJudgment"
        },
        "id": {
          "$ref": "#/definitions/Uuid"
        },
        "tag": {
          "const": "formal",
          "type": "string"
        }
      },
      "required": [
        "tag",
        "id",
        "content"
      ],
      "type": "object"
    },
    "ModelDecl": {
      "anyOf": [
        {
          "$ref": "#/definitions/ObjectDecl"
        },
        {
          "$ref": "#/definitions/MorphismDecl"
        }
      ],
      "description": "A declaration in the definition of a model."
    },
    "ModelDocument": {
      "additionalProperties": false,
      "description": "A document defining a model.",
      "properties": {
        "name": {
          "description": "Human-readable name of the document.",
          "type": "string"
        },
        "notebook": {
          "$ref": "#/definitions/Notebook%3CModelJudgment%3E",
          "description": "Content of the model, formal and informal."
        },
        "theory": {
          "description": "Identifier of double theory that the model is of.",
          "type": "string"
        },
        "type": {
          "const": "model",
          "description": "Type of the document, such as \"model\" or \"diagram\".",
          "type": "string"
        }
      },
      "required": [
        "name",
        "notebook",
        "theory",
        "type"
      ],
      "type": "object"
    },
    "ModelJudgment": {
      "$ref": "#/definitions/ModelDecl",
      "description": "A judgment in the definition of a model. TODO: Judgments should be declarations *or* morphism equations."
    },
    "Mor": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "content": {
              "$ref": "#/definitions/Uuid"
            },
            "tag": {
              "const": "Basic",
              "type": "string"
            }
          },
          "required": [
            "tag",
            "content"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "content": {
              "type": "string"
            },
            "tag": {
              "const": "Composite",
              "type": "string"
            }
          },
          "required": [
            "tag",
            "content"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "content": {
              "additionalProperties": false,
              "properties": {
                "cod": {
                  "$ref": "#/definitions/Mor"
                },
                "dom": {
                  "$ref": "#/definitions/Mor"
                },
                "post": {
                  "$ref": "#/definitions/Mor"
                },
                "pre": {
                  "$ref": "#/definitions/Mor"
                }
              },
              "required": [
                "dom",
                "cod",
                "pre",
                "post"
              ],
              "type": "object"
            },
            "tag": {
              "const": "TabulatorSquare",
              "type": "string"
            }
          },
          "required": [
            "tag",
            "content"
          ],
          "type": "object"
        }
      ],
      "description": "A morphism in a model of a double theory."
    },
    "MorType": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "content": {
              "$ref": "#/definitions/Ustr"
            },
            "tag": {
              "const": "Basic",
              "type": "string"
            }
          },
          "required": [
            "tag",
            "content"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "content": {
              "$ref": "#/definitions/ObType"
            },
            "tag": {
              "const": "Hom",
              "type": "string"
            }
          },
          "required": [
            "tag",
            "content"
          ],
          "type": "object"
        }
      ],
      "description": "Morphism type in a double theory."
    },
    "MorphismDecl": {
      "additionalProperties": false,
      "description": "Declaration of a morphism in a model.",
      "properties": {
        "cod": {
          "anyOf": [
            {
              "$ref": "#/definitions/Ob"
            },
            {
              "type": "null"
            }
          ],
          "description": "Codomain of morphism, if defined."
        },
        "dom": {
          "anyOf": [
            {
              "$ref": "#/definitions/Ob"
            },
            {
              "type": "null"
            }
          ],
          "description": "Domain of morphism, if defined."
        },
        "id": {
          "$ref": "#/definitions/Uuid",
          "description": "Globally unique identifier of morphism."
        },
        "morType": {
          "$ref": "#/definitions/MorType",
          "description": "The morphism's type in the double theory."
        },
        "name": {
          "description": "Human-readable name of morphism.",
          "type": "string"
        },
        "tag": {
          "const": "morphism",
          "type": "string"
        }
      },
      "required": [
        "cod",
        "dom",
        "id",
        "morType",
        "name",
        "tag"
      ],
      "type": "object"
    },
    "Notebook<ModelJudgment>": {
      "additionalProperties": false,
      "description": "Data type for a notebook. A notebook is nothing more than a list of cells. Any metadata associated with a notebook, such as its title, is stored elsewhere.",
      "properties": {
        "cells": {
          "items": {
            "$ref": "#/definitions/Cell%3CModelJudgment%3E"
          },
          "type": "array"
        }
      },
      "required": [
        "cells"
      ],
      "type": "object"
    },
    "Ob": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "content": {
              "$ref": "#/definitions/Uuid"
            },
            "tag": {
              "const": "Basic",
              "type": "string"
            }
          },
          "required": [
            "tag",
            "content"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "content": {
              "$ref": "#/definitions/Mor"
            },
            "tag": {
              "const": "Tabulated",
              "type": "string"
            }
          },
          "required": [
            "tag",
            "content"
          ],
          "type": "object"
        }
      ],
      "description": "An object in a model of a double theory."
    },
    "ObType": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "content": {
              "$ref": "#/definitions/Ustr"
            },
            "tag": {
              "const": "Basic",
              "type": "string"
            }
          },
          "required": [
            "tag",
            "content"
          ],
          "type": "object"
        },
        {
          "additionalProperties": false,
          "properties": {
            "content": {
              "$ref": "#/definitions/MorType"
            },
            "tag": {
              "const": "Tabulator",
              "type": "string"
            }
          },
          "required": [
            "tag",
            "content"
          ],
          "type": "object"
        }
      ],
      "description": "Object type in a double theory."
    },
    "ObjectDecl": {
      "additionalProperties": false,
      "description": "Declaration of an object in a model.",
      "properties": {
        "id": {
          "$ref": "#/definitions/Uuid",
          "description": "Globally unique identifier of object."
        },
        "name": {
          "description": "Human-readable name of object.",
          "type": "string"
        },
        "obType": {
          "$ref": "#/definitions/ObType",
          "description": "The object's type in the double theory."
        },
        "tag": {
          "const": "object",
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "obType",
        "tag"
      ],
      "type": "object"
    },
    "RichTextCell": {
      "additionalProperties": false,
      "description": "A cell containing rich text.",
      "properties": {
        "content": {
          "type": "string"
        },
        "id": {
          "$ref": "#/definitions/Uuid"
        },
        "tag": {
          "const": "rich-text",
          "type": "string"
        }
      },
      "required": [
        "tag",
        "id",
        "content"
      ],
      "type": "object"
    },
    "StemCell": {
      "additionalProperties": false,
      "description": "A stem cell is a placeholder which will be converted into another cell. Stem cells are created when the user opens the \"new cell\" menu and are destroyed and replaced when a type for the new cell is selected.",
      "properties": {
        "id": {
          "$ref": "#/definitions/Uuid"
        },
        "tag": {
          "const": "stem",
          "type": "string"
        }
      },
      "required": [
        "tag",
        "id"
      ],
      "type": "object"
    },
    "Ustr": {
      "type": "string"
    },
    "Uuid": {
      "type": "string"
    }
  }
}


